syntax = "proto3";

// sr: 2 byte. Stack relative address
// st: 8 byte. Static object pointer
// cp: 8 byte. Code pointer
// cr: 2 byte. Code offset
// k:  1 byte. Data constructor kind
// po: 1 byte. PrimOp
// bo: 2 byte. Block offset

message Func {
    uint32           arity  = 1;
    repeated fixed64 srt    = 2; // SRT
    repeated Block   blocks = 3;
    string           symbol = 4;
}

message Block {
    bytes          bitmap = 1; // Stack payload layout bitmap
    repeated Instr code   = 2;
}

message Instr {
    Opcode          opcode   = 1;
    uint32          p_num    = 2; // pointer number
    repeated uint32 operands = 3; // Actually 16 bit
}

enum Opcode {
    NOP         = 0;

    // SREF        = 1;  // Push static references (pt)*
    // BLOCK       = 1;  // Tell stack layout (sl) and push static references (pt)*

    JUMP        = 2;  // Jump to the function (cp)
    PUSH        = 3;  // Push (copy) local (sr)
    RETURN      = 4;  // Return local (sr)
    PRIMOP_P    = 5;  // Primitive operator (po) call
    PRIMOP_R    = 6;
    CONSTR_P    = 7;  // Make a data cons (k) with arguments (sr)*
    CONSTR_R    = 8;
    FUNC_P      = 9;  // Make a function (cp) object
    FUNC_R      = 10;
    THUNK_F_P   = 11; // Make a thunk with the function (cp) and arguments (sr)*
    THUNK_F_R   = 12;
    THUNK_C_P   = 13; // Make a thunk with the closure (sr) and arguments (sr)*
    THUNK_C_R   = 14;
    BOTTOM_P    = 15; // Make bottom object
    BOTTOM_R    = 16;
    EVAL        = 17; // eval closures (sr)*
    MATCH_A_E_P = 18; // Eval ADT (sr) and pattern match, jump by (bo)*
    MATCH_A_E_R = 19;
}
